<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/homeroom.css">
</head>
<body>
    <div class="container">
        <div class="top d-flex justify-content-between">
            <h1>Homeroom</h1>
            <div class="search-container">
                <div class="input-wrapper">
                    <img src="/img/search 1.svg" alt="Search" class="search-icon"> 
                    <input type="text" class="search-input" placeholder="Search">
                </div>
                
            </div>
            
        </div>
        <div class="tab-box d-flex justify-content-start">
            <button class="tab-btn">Evaluate Conduct</button>
            <button class="tab-btn">Finalize Grades</button>
            <div class="line"></div>
        </div>
        <div class="content-box">
            <div class="content">
                <div class="d-flex my-3">
                    <button class="excel mr-3" onclick="saveBehaviour()">
                        Save
                    </button>  
                </div>
                <table id="infoTable">
                <tr>
                    <th>ID</th>
                    <th>Student Name</th>
                    <th>Date of Birth</th>
                    <th>Status</th>
                    <th></th>
                </tr>
                {{#each students}}
                <tr>
                    <td>HS001</td>
                    <td>{{this.Name}}</td>
                    <td>{{this.DOB}}</td>
                    <td>{{this.Status}}</td>
                    <td>
                        <select class="custom-select form-control" id="Subject" data-student-id="{{this._id}}">
                            <option {{#if (eq this.Behaviour "Excellent")}}selected{{/if}}>Excellent</option>
                            <option {{#if (eq this.Behaviour "Good")}}selected{{/if}}>Good</option>
                            <option {{#if (eq this.Behaviour "Satisfactory")}}selected{{/if}}>Satisfactory</option>
                            <option {{#if (eq this.Behaviour "Needs Improvement")}}selected{{/if}}>Needs Improvement</option>
                            <option {{#if (eq this.Behaviour "Unsatisfactory")}}selected{{/if}}>Unsatisfactory</option>
                        </select>
                    </td>
                </tr>
                {{/each}}
                
            </table>
            <div class="table-control d-inline-flex justify-content-start align-items-center">
                    <div class="rows-per-page d-inline-flex">
                        <label for="rows" class="align-self-center">Rows per page:</label>
                        <select id="rows" name="rows">
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="5">5</option>
                        </select>
                    </div>
                    <div class="pagination-info">
                        1/1 of 1
                    </div>
                    <div class="pagination-controls">
                        <button>&lt;</button> <!-- Previous page -->
                        <button>&gt;</button> <!-- Next page -->
                    </div>
                </div>
                
            </div>
            <div class="content">
                <div class="d-flex my-3 justify-content-between">
                    <form class="form-inline">
                        <label class="sem-label mr-3" for="Semester">Semester</label>
                                <select class="custom-select form-control" id="Semester">
                                    <option selected>Choose...</option>
                                    <option>I</option>

                                </select>
                    </form>
                    <div>
                        <button class="excel mr-3">
                            <img src="/img/file-excel (1).png" alt="Excel File Export">
                            Excel Export
                        </button>
                        <button class="pdf ">
                            <img src="/img/file-pdf (1).png" alt="PDF File Export">
                            PDF Export
                        </button>
                    </div>
            </div>
                <table class="student-grades">
                    <tr>
                        <th></th>
                        <th>Toán</th>
                        <th>Văn</th>
                        <th>Anh</th>
                        <th>KHTN</th>
                        <th>Lịch sử và Địa lý</th>
                        <th>GDCD</th>
                        <th>Công nghệ</th>
                        <th>Tin học</th>
                        <th>DTB</th>
                    </tr>
                    {{#each students}}
                    <tr>
                        <td>{{this.Name}}</td>
                        <td>{{lookup this.SubjectAverages 'Toán'}}</td>
                        <td>{{lookup this.SubjectAverages 'Văn'}}</td>
                        <td>{{lookup this.SubjectAverages 'Anh'}}</td>
                        <td>{{lookup this.SubjectAverages 'KHTN'}}</td>
                        <td>{{lookup this.SubjectAverages 'Lịch sử và Địa lý'}}</td>
                        <td>{{lookup this.SubjectAverages 'GDCD'}}</td>
                        <td>{{lookup this.SubjectAverages 'Công nghệ'}}</td>
                        <td>{{lookup this.SubjectAverages 'Tin học'}}</td>
                        <td> </td>
                    </tr>
                    {{/each}}
                </table>
            </div>
            
        

        
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
        const tabs = document.querySelectorAll('.tab-btn');
        const allContent = document.querySelectorAll('.content');
        const line = document.querySelector('.line');
        const defaultRowsPerPage = 10; // Set your default value here
        let currentPage = 1;
        let rowsPerPage = defaultRowsPerPage;
        const rowsSelect = document.getElementById('rows');
        function updateLine(tab) {
            line.style.width = `${tab.offsetWidth}px`;
            line.style.left = `${tab.offsetLeft}px`;
            line.style.bottom = '-3px';
        }

        function updateTableDisplay(table) {
            const rows = table.querySelectorAll('tr:not(:first-child)');
            const totalPages = Math.ceil(rows.length / rowsPerPage);
            const paginationInfo = document.querySelector('.pagination-info');
            
            // Hide all rows
            rows.forEach(row => {
                row.style.display = 'none';
            });

            // Calculate the range of rows to display
            const start = (currentPage - 1) * rowsPerPage;
            const end = start + rowsPerPage;
            
            // Show the rows for the current page
            rows.forEach((row, index) => {
                if (index >= start && index < end) {
                    row.style.display = 'table-row';
                }
            });

            paginationInfo.textContent = `${currentPage}/${totalPages} of ${rows.length}`;
        }
        function resetRowsPerPage(table) {
            currentPage = 1; // Reset to the first page
            rowsPerPage = defaultRowsPerPage; // Reset to the default rows per page
            rowsSelect.value = defaultRowsPerPage.toString(); // Update the select element to show the default value
            updateTableDisplay(table);
        }

        function goToPreviousPage(table) {
            if (currentPage > 1) {
                currentPage--;
                updateTableDisplay(table);
            }
        }

        function goToNextPage(table) {
            const rows = table.querySelectorAll('tr:not(:first-child)');
            const totalPages = Math.ceil(rows.length / rowsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                updateTableDisplay(table);
            }
        }
        

        tabs.forEach((tab, index) => {
            tab.addEventListener('click', () => {
                tabs.forEach((t, i) => {
                    t.classList.remove('active');
                    allContent[i].style.display = 'none';
                });

                tab.classList.add('active');
                allContent[index].style.display = 'block';
                updateLine(tab);

                // Reset rows per page for the active tab's table
                const activeTable = allContent[index].querySelector('table');
                resetRowsPerPage(activeTable);
            });
        });
        document.getElementById('rows').addEventListener('change', function(event) {
            rowsPerPage = parseInt(event.target.value, 10);
            currentPage = 1; // Reset to the first page
            const activeTable = document.querySelector('.content:not([style*="display: none"]) table');
            updateTableDisplay(activeTable);
        });

        const prevButton = document.querySelector('.pagination-controls button:first-child');
        const nextButton = document.querySelector('.pagination-controls button:last-child');

        prevButton.addEventListener('click', function() {
            const activeTable = document.querySelector('.content:not([style*="display: none"]) table');
            goToPreviousPage(activeTable);
        });
        nextButton.addEventListener('click', function() {
            const activeTable = document.querySelector('.content:not([style*="display: none"]) table');
            goToNextPage(activeTable);
        });

        // Initialize
        if(allContent.length > 0) {
                tabs[0].classList.add('active');
                allContent[0].style.display = 'block';
                updateLine(tabs[0]);

                const firstTable = allContent[0].querySelector('table');
                resetRowsPerPage(firstTable); // Use reset function to initialize the table
            }
        });
    </script>
    <script>
        function saveBehaviour() {
            const selects = document.querySelectorAll('.custom-select');
            const behaviours = Array.from(selects).map(select => {
                return {
                    studentId: select.dataset.studentId,
                    behaviour: select.value
                };
            });

            // Gửi yêu cầu cập nhật đến máy chủ
            fetch('http://localhost:3000/homeroom/update/behaviour', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(behaviours)
            })
            .then(response => response.json())
            .then(data => {
                console.log('Cập nhật thành công:', data);
            })
            .catch(error => {
                console.error('Lỗi khi cập nhật:', error);
            });
        }
    </script>
</body>